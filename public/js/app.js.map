{"version":3,"sources":["app/app.js","directives/battleArenaDirective.js","directives/roombaDirective.js","controllers/arenaController.js","controllers/mainController.js","controllers/roombaController.js","services/drawingService.js","services/positionService.js","services/socketService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["'use strict';\n\nvar app = angular.module('roomba-battle', []);\n","'use strict';\n\napp.directive('battleArena', function() {\n\n  return {\n    restrict: 'E',\n    controller: 'arenaController',\n    template: '<canvas id=\"battle-arena\" height=\"300\" width=\"320\"></canvas>',\n    replace: true\n  };\n\n});\n","'use strict';\n\napp.directive('roombah', function(socket) {\n  return {\n    restrict: 'E',\n    template: '<div class=\"roombah\">{{ roombah.name }}</div>', \n    replace: true,\n    bindToController: {\n      'top': '=',\n      'right': '=',\n      'color': '=',\n      'name': '='\n    },\n    controller: 'roombahController',\n    controllerAs: 'rmbCtrl',\n    link:function (scope, element, attrs) {\n      scope.$watch(attrs.top, function (y) {\n        element.css('top', y + 'px');\n        socket.emit('top', y);\n      });\n      scope.$watch(attrs.right, function (x) {\n        element.css('right', x + 'px');\n        socket.emit('right', x);\n      });\n      scope.$watch(attrs.color, function (color) {\n        element.css('backgroundColor', color);\n      });\n    }\n  };\n});\n","'use strict';\n\napp.controller('arenaController', function(socket, drawingService) {\n\n  var vm = this;\n\n  socket.on('roombas', function(roombas) {\n    drawingService.drawRoombas(roombas);\n  });\n  \n});\n","'use strict';\n\napp.controller('mainController', function(){\n  var vm = this;\n});\n","'use strict';\n\napp.controller('roombaController', function(drawingService, $interval, positionService, socket) {\n\n  var vm = this;\n\n  vm.roomba = {};\n  vm.roomba.y = 100;\n  vm.roomba.x = 100;\n  vm.roomba.name = \"Guy\";\n  vm.roomba.color = 'orange';\n  vm.roomba.radius = 20;\n\n  $interval(function() {\n    vm.roomba = positionService.calculateMovement(vm.roomba);\n    socket.emit('roombas', vm.roomba);\n  }, 20);\n\n});\n","'use strict';\n\napp.factory('drawingService', function() {\n\n  var service = {};\n  var canvas = document.querySelector('#battle-arena');\n  var ctx;\n\n  function drawRoomba(roomba) {\n    ctx.beginPath();\n    ctx.arc(roomba.x, roomba.y, roomba.radius, 0, Math.PI*2, true);\n    ctx.closePath();\n    ctx.fillStyle = roomba.color;\n    ctx.fill();\n  };\n\n  if (canvas.getContext) {\n    ctx = canvas.getContext('2d');\n    ctx.width = 320;\n    ctx.height = 300;\n    ctx.fillStyle = 'white';\n    ctx.rect(0, 0, 320, 300);\n    ctx.fill();\n  }\n\n  service.drawRoombas = function(roombas) {\n    debugger\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    roombas.forEach(function(roomba) {\n      drawRoomba(roomba);\n    });\n  } \n\n  return service;\n\n});\n","'use strict';\n\napp.factory('positionService', function() {\n\n  var service = {};\n\n  var changeYDirection = function(roomba) {\n    roomba.goingDown = !roomba.goingDown;\n  }\n\n  var changeXDirection = function(roomba) {\n    roomba.goingRight = !roomba.goingRight;\n  }\n\n  var checkArenaBounds = function(roomba) {\n    if (roomba.y === 0 || roomba.y === 270) {\n      changeYDirection(roomba);\n    }\n    \n    if (roomba.x === 0 || roomba.x === 290) {\n      changeXDirection(roomba);\n    }\n  };\n\n  service.calculateMovement = function(roomba) {\n    if (roomba.goingDown) {\n      roomba.y++;\n    } else {\n      roomba.y--;\n    }\n    if (roomba.goingRight) {\n      roomba.x--;\n    } else {\n      roomba.x++;\n    }\n    checkArenaBounds(roomba);\n    return roomba;\n  };\n\n  return service;\n\n});\n","'use strict';\n\napp.factory('socket', function($rootScope) {\n\n  var socket = io.connect();\n\n  var service = {\n    on: function (eventName, callback) {\n      socket.on(eventName, function () {  \n        var args = arguments;\n        $rootScope.$apply(function () {\n          callback.apply(socket, args);\n        });\n      });\n    },\n    emit: function (eventName, data, callback) {\n      socket.emit(eventName, data, function () {\n        var args = arguments;\n        $rootScope.$apply(function () {\n          if (callback) {\n            callback.apply(socket, args);\n          }\n        });\n      })\n    }\n  };\n\n  return service;\n});\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["app/app.js","controllers/arenaController.js","controllers/mainController.js","controllers/roombaController.js","services/drawingService.js","services/positionService.js","services/socketService.js","directives/battleArenaDirective.js","directives/roombaDirective.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"app.js","sourcesContent":["'use strict';\n\nvar app = angular.module('roomba-battle', []);\n","'use strict';\n\napp.controller('arenaController', function(socket, drawingService) {\n  socket.on('roombas', function(roombas) {\n    //positionService.setRoombas(roombas);\n    drawingService.drawRoombas(roombas);\n  });\n});\n","'use strict';\n\napp.controller('mainController', function(){\n  var vm = this;\n});\n","'use strict';\n\napp.controller('roombaController', function($interval, socket) {\n\n  var vm = this;\n\n  vm.roomba = {};\n  vm.roomba.y = 100;\n  vm.roomba.x = 100;\n  vm.roomba.name = \"Guy\";\n  vm.roomba.color = 'orange';\n  vm.roomba.radius = 20;\n  vm.roomba.direction = 0;\n  vm.roomba.speed = 0;\n  vm.roomba.xVelocity = 1;\n  vm.roomba.yVelocity = .1;\n  vm.roomba.collidingWith = [];\n\n  function calculateDirectionAndSpeedFromXYVectors(roomba) {\n    var quarter = ((2*Math.PI)/4);\n    vm.roomba.speed = Math.sqrt(Math.pow(roomba.xVelocity, 2) + Math.pow(roomba.yVelocity, 2));\n    var theta = Math.abs(Math.atan(roomba.xVelocity/roomba.yVelocity));\n    if (roomba.xVelocity >= 0 && roomba.yVelocity >= 0)\n      roomba.direction = theta;\n    else if (roomba.xVelocity >= 0 && roomba.yVelocity < 0)\n      roomba.direction = quarter + theta;\n    else if (roomba.xVelocity < 0 && roomba.yVelocity < 0)\n      roomba.direction = (2*quarter) + theta;\n    else if (roomba.xVelocity < 0 && roomba.yVelocity >= 0)\n      roomba.direction = (3*quarter) + theta;\n    return roomba;\n  }\n\n  vm.joinGame = function() {\n    //calculateXAndYVelocities(vm.roomba.direction, vm.roomba.speed);\n    vm.roomba = calculateDirectionAndSpeedFromXYVectors(vm.roomba);\n    socket.emit('join game', vm.roomba);\n    $interval(function() {\n      socket.emit('requestRoombas');\n    }, 15);\n  };\n});\n","'use strict';\n\napp.factory('drawingService', function() {\n\n  var service = {};\n  var canvas = document.querySelector('#battle-arena');\n  var ctx;\n\n  function drawRoomba(roomba) {\n    ctx.beginPath();\n    ctx.arc(roomba.x, roomba.y, roomba.radius, 0, Math.PI*2, true);\n    ctx.closePath();\n    ctx.fillStyle = roomba.color;\n    ctx.fill();\n  };\n\n  if (canvas.getContext) {\n    ctx = canvas.getContext('2d');\n    ctx.width = 320;\n    ctx.height = 300;\n    ctx.fillStyle = 'white';\n    ctx.rect(0, 0, 320, 300);\n    ctx.fill();\n  }\n\n  service.drawRoombas = function(roombas) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    roombas.forEach(function(roomba) {\n      drawRoomba(roomba);\n    });\n  } \n\n  return service;\n});\n","'use strict';\n\napp.factory('positionService', function() {\n\n  var service = {};\n  var _roomba = {};\n  var _roombas = [];\n\n  var bounceOffTopOrBottom = function(roomba) {\n    _roomba.direction = 2 - roomba.direction;\n  };\n\n  var bounceOffSides = function(roomba) {\n    if (roomba.direction > 1) {\n      _roomba.direction = 2 - (roomba.direction - 1);\n    }\n    if (roomba.direction <= 1) {\n      _roomba.direction = 1 - roomba.direction;\n    }\n  };\n\n  var checkArenaBounds = function(roomba) {\n    if (roomba.y <= 0 + roomba.radius || roomba.y >= 270 - roomba.radius) {\n      bounceOffTopOrBottom(roomba);\n      if (roomba.y < 0) roomba.y = 0;\n      if (roomba.y > 270) roomba.y = 270;\n    }\n    if (roomba.x <= 0 + roomba.radius || roomba.x >= 290 - roomba.radius) {\n      bounceOffSides(roomba);\n      if (roomba.x < 0) roomba.x = 0;\n      if (roomba.x > 290) roomba.x = 290;\n    }\n  };\n\n  function calculateDistance(roomba1, roomba2) {\n    var distance = Math.sqrt(\n        Math.pow(roomba1.y - roomba2.y, 2) + \n        Math.pow(roomba1.x - roomba2.x, 2));\n    return distance;\n  }\n\n  function detectCollisions(roomba, otherRoombas) {\n    if (otherRoombas) {\n      otherRoombas = otherRoombas.filter(function(rba) {\n        return rba.name !== roomba.name;\n      });\n      otherRoombas.forEach(function(rba) {\n        var distance = calculateDistance(roomba, rba);\n        if (distance < roomba.radius + rba.radius + .5) {\n          collideRoombas(rba);\n        }\n      });\n    }\n  }\n\n  function collideRoombas(rba) {\n    var dx = Math.abs(rba.x - _roomba.x);\n    var dy = Math.abs(rba.y - _roomba.y);\n    var angle = Math.atan(dx/dy);\n    if (_roomba.y >= rba.y)\n      _roomba.direction = 2 - angle;\n    if (_roomba.y < rba.y)\n      _roomba.direction = angle;\n  }\n\n  service.setRoombas = function(roombas) {\n    _roombas = roombas;\n  };\n\n  service.calculateMovement = function(roomba) {\n    if (_roombas.length !== 0) {\n      _roomba = _roombas.filter(function(rba) {\n        if (rba.name === roomba.name) {\n          return rba;\n        }\n      });\n      _roomba = _roomba[0];\n    } else {\n      _roomba = roomba;\n    }\n    var dx;\n    var dy;\n    dx = (_roomba.velocity)*(Math.cos(_roomba.direction * Math.PI));\n    dy = (_roomba.velocity)*(Math.sin(_roomba.direction * Math.PI));\n    _roomba.x += dx;\n    _roomba.y += dy;\n    checkArenaBounds(_roomba);\n    return _roomba;\n  };\n\n  return service;\n});\n","'use strict';\n\napp.factory('socket', function($rootScope) {\n\n  var socket = io.connect();\n\n  var service = {\n    on: function (eventName, callback) {\n      socket.on(eventName, function () {  \n        var args = arguments;\n        $rootScope.$apply(function () {\n          callback.apply(socket, args);\n        });\n      });\n    },\n    emit: function (eventName, data, callback) {\n      socket.emit(eventName, data, function () {\n        var args = arguments;\n        $rootScope.$apply(function () {\n          if (callback) {\n            callback.apply(socket, args);\n          }\n        });\n      })\n    }\n  };\n\n  return service;\n});\n","'use strict';\n\napp.directive('battleArena', function() {\n\n  return {\n    restrict: 'E',\n    controller: 'arenaController',\n    template: '<canvas id=\"battle-arena\" height=\"300\" width=\"320\"></canvas>',\n    replace: true\n  };\n\n});\n","'use strict';\n\napp.directive('roombah', function(socket) {\n  return {\n    restrict: 'E',\n    template: '<div class=\"roombah\">{{ roombah.name }}</div>', \n    replace: true,\n    bindToController: {\n      'top': '=',\n      'right': '=',\n      'color': '=',\n      'name': '='\n    },\n    controller: 'roombahController',\n    controllerAs: 'rmbCtrl',\n    link:function (scope, element, attrs) {\n      scope.$watch(attrs.top, function (y) {\n        element.css('top', y + 'px');\n        socket.emit('top', y);\n      });\n      scope.$watch(attrs.right, function (x) {\n        element.css('right', x + 'px');\n        socket.emit('right', x);\n      });\n      scope.$watch(attrs.color, function (color) {\n        element.css('backgroundColor', color);\n      });\n    }\n  };\n});\n"],"sourceRoot":"/source/"}